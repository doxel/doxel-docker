#!/bin/bash

set -x

SENSOR_WIDTH_DB=${SENSOR_WIDTH_DB:-/usr/share/openMVG/sensor_width_camera_database.txt}
NUM_THREADS=${NUM_THREADS:-$(nproc)}

URL=${URL:-http://localhost:3001/api}
USERNAME=${USERNAME:-worker}
PASSWORD=${PASSWORD:-worker}

errmsg() {
  echo "*** ERROR: $@" >&2
  exit 1
}

progress() {
  echo "=== $@" >&2
}

# login
ACCESS_TOKEN=$(loopback-login -u $USERNAME -p $PASSWORD --no-check-certificate $URL)
[ -z "$ACCESS_TOKEN" ] && errmsg login failed

AUTHORIZATION=$(jq -r .id <<< $ACCESS_TOKEN)
[ -z "$AUTHORIZATION" ] && errmsg no authorization

USER_ID=$(jq -r .userId <<< $ACCESS_TOKEN)
[ -z "$USER_ID" ] && errmsg no user id

# get job info
RESULT=$(doxel-getjob -a $AUTHORIZATION $URL)
[ -z "$RESULT" ] && errmsg no job

JOB_ID=$(jq -r .result.job.id <<< $RESULT)
[ -z "$JOB_ID" ] && errmsg no job id

SEGMENT_ID=$(jq -r .result.job.segmentId <<< $RESULT)
[ -z "$SEGMENT_ID" ] && errmsg no segment id

echo $AUTHORIZATION
SEGMENT_DIR=$(doxel-segment-path -s $SEGMENT_ID -a $AUTHORIZATION $URL | sed -r -e 's/.*\/upload/\/mnt\/upload/')
[ -z "$SEGMENT_DIR" ] && errmsg no segment dir


sfm_init() {
  if [ -f $SEGMENT_DIR/openMVG/sfm_data.json ]
  then
    progress "Images list already exist"
  else
    progress "Images listing"
#     if exiftool $(find original_images/ -name \*.jpeg -print -quit) | grep model -i | grep -qi EYESIS
#     then
      SFMINIT_IMAGELISTING_OPTIONS=${SFMINIT_IMAGELISTING_OPTIONS:-\
      }
      openMVG_main_SfMInit_ImageListing \
        -i $SEGMENT_DIR/original_images \
        -o $SEGMENT_DIR/openMVG \
        -d $SENSOR_WIDTH_DB \
        $SFMINIT_IMAGELISTING_OPTIONS

      EXIT_CODE=$?
      if [ $EXIT_CODE -ne 0 ] ; then
        [ -f $SEGMENT_DIR/openMVG/sfm_data.json ] && rm $SEGMENT_DIR/openMVG/sfm_data.json
        errmsg "openMVG_main_SfMInit_ImageListing exited with status $EXIT_CODE"
      fi

#     else
#         openMVG_main_SfMInit_ImageListing \
#          -i ./original_images \
#          -d $SENSOR_WIDTH_DB \
#          -o ./openMVG
#     fi
  fi
}

compute_features() {
  if [ -n "$(find $SEGMENT_DIR/openMVG/matches/ -maxdepth 1 -iname \*.feat -print -quit)" ]
  then
    progress Features already exist
  else
    progress Feature detect
    COMPUTEFEATURES_OPTIONS=${COMPUTEFEATURES_OPTIONS:-\
      -m SIFT \
    }
    openMVG_main_ComputeFeatures \
      -o $SEGMENT_DIR/openMVG/matches/ \
      -i $SEGMENT_DIR/openMVG/sfm_data.json \
      -n $NUM_THREADS \
      $COMPUTEFEATURES_OPTIONS

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
       find $SEGMENT_DIR/openMVG/matches/ -maxdepth 1 -iname \*.feat -or -iname \*.desc -exec rm '{}' \;
      errmsg openMVG_main_ComputeFeatures exited with status $EXIT_CODE
    fi

  fi
}

compute_matches() {
  if [ -n "$(find $SEGMENT_DIR/openMVG/matches/ -maxdepth 1 -name matches.putative.\* -print -quit)" ]
  then
    progress Matches already done
  else
    progress Matching
    COMPUTEMATCHES_OPTIONS=${COMPUTEMATCHES_OPTIONS:-\
      -g e \
    }
    openMVG_main_ComputeMatches \
      -i $SEGMENT_DIR/openMVG/sfm_data.json \
      -o $SEGMENT_DIR/openMVG/matches \
      $COMPUTEMATCHES_OPTIONS

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
      find $SEGMENT_DIR/openMVG/matches/ -maxdepth 1 -iname matches.putative.\* -exec rm '{}' \;
      errmsg "openMVG_main_ComputeMatches exited with status $EXIT_CODE"
    fi
  fi
}

global_sfm() {
  if [ -f $SEGMENT_DIR/openMVG/SfMReconstruction_Report.html ]
  then
    progress "GlobalSfM already done"
  else
    progress "Running GlobalSfM"
    GLOBALSFM_OPTIONS=${GLOBALSFM_OPTIONS:-\
    }
    openMVG_main_GlobalSfM \
      -i $SEGMENT_DIR/openMVG/sfm_data.json \
      -m $SEGMENT_DIR/openMVG/matches \
      -o $SEGMENT_DIR/openMVG/ \
      $GLOBALSFM_OPTIONS

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
       find $SEGMENT_DIR/openMVG/SfMReconstruction_Report.html -maxdepth 1 -exec rm '{}' \;
      errmsg "openMVG_main_GlobalSfM exited with status $EXIT_CODE"
    fi
  fi
}

compute_structure_from_known_poses() {
  if [ -f $SEGMENT_DIR/openMVG/robust.ply ]
  then
    progress "Compute Structure From Known Poses already done"
  else
    progress "Compute Structure From Known Poses"
    COMPUTESTRUCTUREFROMKNOWNPOSES_OPTIONS=${COMPUTESTRUCTUREFROMKNOWNPOSES_OPTIONS:-\
    }
    openMVG_main_ComputeStructureFromKnownPoses \
      -i $SEGMENT_DIR/openMVG/sfm_data.bin \
      -m $SEGMENT_DIR/openMVG/matches \
      -o $SEGMENT_DIR/openMVG/robust.json \
      $COMPUTESTRUCTUREFROMKNOWNPOSES_OPTIONS

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
       [ -f $SEGMENT_DIR/openMVG/robust.ply ] && rm $SEGMENT_DIR/openMVG/robust.ply
      errmsg "openMVG_main_ComputeStructureFromKnownPoses exited with status $EXIT_CODE"
    fi
  fi
}

openmvg2pmvs() {
  if [ -n "$(find $SEGMENT_DIR/PMVS/ -maxdepth 1 -name pmvs_options.txt -print -quit)" ]
  then
    progress "PMVS directory already exist"
  else
    progress "Exporting to PMVS"
    OPENMVG2PMVS_OPTIONS=${OPENMVG2PMVS_OPTIONS:-\
    }
    openMVG_main_openMVG2PMVS \
      -i $SEGMENT_DIR/openMVG/robust.json \
      -o $SEGMENT_DIR \
      $OPENMVG2PMVS_OPTIONS

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
       [ -d $SEGMENT_DIR/PMVS ] && rm -r $SEGMENT_DIR/PMVS
      errmsg "openMVG_main_openMVG2PMVS exited with status $EXIT_CODE"
    fi
  fi
}

cmvspmvs() {
  if [ -n "$(find $SEGMENT_DIR/PMVS/models/ -type f -print -quit)" ]
  then
    progress "PMVS models directory already exist"
  else
   progress "running CMVS/PMVS"
   cmvs PMVS/ 80 $NUM_THREADS \
   && genOption PMVS/ \
   && sed -i "s/ pmvs/ PMVS/g" PMVS/pmvs.sh \
   && bash PMVS/pmvs.sh

   EXIT_CODE=$?
   if [ $EXIT_CODE -ne 0 ] ; then
      [ -d $SEGMENT_DIR/PMVS/models ] && rm -r $SEGMENT_DIR/PMVS/models
     errmsg "CMVS/PMVS exited with status $EXIT_CODE"
   fi

 fi
}

viewer() {
  if [ -d $SEGMENT_DIR/potree ]
  then
    progress "Potree directory already exist"
  else
    progress "running viewer.sh"
    viewer.sh

    EXIT_CODE=$?
    if [ $EXIT_CODE -ne 0 ] ; then
       [ -d $SEGMENT_DIR/potree ] && rm -r $SEGMENT_DIR/potree
      errmsg "viewer.sh exited with status $EXIT_CODE" >&2
    fi

  fi
}

process_segment() {
  set -x
  SEGMENT_DIR=$1
  cd $SEGMENT_DIR || errmsg "no such directory: $SEGMENT_DIR"

  sfm_init
  compute_features
  compute_matches
  global_sfm
  compute_structure_from_known_poses
  openmvg2pmvs
  cmvspmvs
  viewer

}

process_segment $SEGMENT_DIR
